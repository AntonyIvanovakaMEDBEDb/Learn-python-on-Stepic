"""
Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк.
После последней строки матрицы идёт строка, содержащая только строку "end" (без кавычек, см. Sample Input).
Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме
элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1).
У крайних символов соседний элемент находится с противоположной стороны матрицы.

В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
"""
from typing import List
arr_a: List[List[str]] = []
i = 0
j = 0
elem = 0
n = 0
m = 0
line_i = input().split()
while 'end' not in line_i:  # заполняем матрицу  строками пока  не  получим  на входе  'end'
    n = len(line_i)
    for i in range(len(line_i)):
        line_i[i] = int(line_i[i])
    arr_a.append(line_i)
    line_i = input().split()
    m += 1
# Можно  показать данные  введенной  матрицы если интересно
#print('размер матрицы', n, 'столбцов на', m, 'строк')
# формируем  результирующую  матрицу  по  условиям  задачи
i = 0
j = 0
# эти переменные  -  приращение шндекса для вычисления  новых элементов
di = 1
dj = 1
if m == 1:  # обнулим  приращение i если у  нас  только  одна  строка
    di = 0
if n == 1:  # обнулим  приращение j если у  нас  только  один  столбец
    dj = 0
# Можно  показать приращения  индексов если интересно
#print('приращение  по столбцам =', dj, 'приращение  по строкам =', di )
for i in range(len(arr_a)):
    if (i == m - 1) and (m != 1):
        i = -1
    line_i = []
    for j in range(len(arr_a[i])):
        if (j == n - 1) and (n != 1):
            j = -1
        elem = arr_a[i-di][j] + arr_a[i+di][j] + arr_a[i][j-dj] + arr_a[i][j+dj]
        line_i.append(elem)
        print(elem, end = ' ')
    print()                     # делаем переход на новую строку

